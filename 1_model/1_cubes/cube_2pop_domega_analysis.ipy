# %%
import pandas as pd
import os
import seaborn as sns
import numpy as np
import itertools
import matplotlib.pyplot as plt
import tqdm

# %%

df = pd.read_pickle(
    os.path.join("output/cube_2pop_135_rc1", "analysis",
                 'cube_2pop_domega.pkl'))
df = df[df["radius"] == 0.5]

df["phi_0"] = df.apply(lambda x: x["phis"][0], axis=1)
df["phi_1"] = df.apply(lambda x: x["phis"][1]
                       if len(x["phis"]) == 2 else np.empty((0)),
                       axis=1)

df["theta_0"] = df.apply(lambda x: x["thetas"][0], axis=1)
df["theta_1"] = df.apply(lambda x: x["thetas"][1]
                         if len(x["thetas"]) == 2 else np.empty((0)),
                         axis=1)

df = df.drop(["phis", "thetas"], axis=1)

for i, o in itertools.product(["0", "1"], ["25", "50", "75", "std", "mean"]):
    df = df.drop([f"omega_{o}_{i}"], axis=1)

# %%
# df = df[(df.omega == 30) | (df.omega == 60) | (df.omega == 90)]
# df = df[(df.psi == 0.3) | (df.psi == 0.6) | (df.psi == 0.9)]

# %%
cols = ['phi', 'theta']  # omega
df__ = []
for i, row in df.iterrows():
    for p in range(2):
        df_ = pd.DataFrame()
        for c in cols:
            df_[f'{c}'] = row[f'{c}_{p}']
            df_['p'] = p
            df_['omega'] = row['omega']
            df_['psi'] = row['psi']
        df__.append(df_)
df__ = pd.concat(df__, ignore_index=True)

cols = ['omega']
df_omega = []
for i, row in df.iterrows():
    for p in range(2):
        df_ = pd.DataFrame()
        for c in cols:
            df_[f'd{c}'] = row[f'{c}_{p}']
            df_['p'] = p
            df_['omega'] = row['omega']
            df_['psi'] = row['psi']
        df_omega.append(df_)
df_omega = pd.concat(df_omega, ignore_index=True)

# %%
for o in tqdm.tqdm(df__.omega.unique()):
    for p in tqdm.tqdm(df__[df__.omega == o].psi.unique(), leave=False):
        for i in range(2):
            mask = ((df__.omega == o) & (df__.psi == p) &
                    (df__.p == i)).to_numpy()
            thetas = df__.loc[mask].theta.to_numpy()
            phis = df__.loc[mask].phi.to_numpy()

            thetas = 90 - np.rad2deg(thetas)
            phis = np.rad2deg(phis)

            # center on fiber main population orientation
            thetas[np.logical_and(phis > i * o + 90,
                                  phis < i * o + 3 * 90)] *= -1
            phis[np.logical_and(phis > i * o + 90,
                                phis < i * o + 3 * 90)] -= 180
            phis[phis >= i * o + 3 * 90] -= 360

            df__.loc[mask, 'theta'] = thetas
            df__.loc[mask, 'phi'] = phis

# %%
# reduce number of outliers
# df___ = df__[::100]

# %%

dff = pd.DataFrame()
for p in range(2):
    df_p = df__[::100]
    df_o = df_omega[::100]
    # plt.figure()
    # sns.boxplot(data=df___[df___.p == p], hue='psi', x='omega', y='theta')
    # plt.savefig(f'output/domega_theta_p_{p}.pdf')
    df_p_ = df_p[df_p.p == p]
    df_o_ = df_o[df_o.p == p]
    for omega in df_p_.omega.unique():
        for psi in df_p_.psi.unique():
            dff_t = pd.DataFrame({
                f'{omega:.1f}_{psi:.1f}_{p}_theta':
                    df_p_[(df_p_.omega == omega) &
                          (df_p_.psi == psi)].theta.to_numpy()
            })
            dff_p = pd.DataFrame({
                f'{omega:.1f}_{psi:.1f}_{p}_phi':
                    df_p_[(df_p_.omega == omega) &
                          (df_p_.psi == psi)].phi.to_numpy()
            })
            dff_o = pd.DataFrame({
                f'{omega:.1f}_{psi:.1f}_{p}_domega':
                    df_o_[(df_o_.omega == omega) &
                          (df_o_.psi == psi)].domega.to_numpy()
            })
            dff = pd.concat([dff_t, dff_p, dff_o], axis=1)
            dff.to_csv(f'output/omega_{omega:.1f}_psi_{psi:.1f}_p_{p}.csv',
                       index=False)

# %%
df___ = df__[::100]
for p in range(2):
    plt.figure()
    sns.boxplot(data=df___[df___.p == p], hue='psi', x='omega', y='phi')
    plt.savefig(f'output/domega_phi_p_{p}.pdf')

# %%
df___ = df_omega[::100]
for p in range(2):
    plt.figure()
    sns.boxplot(data=df___[df___.p == p], hue='psi', x='omega', y='domega')
    plt.savefig(f'output/domega_domega_p_{p}.pdf')
# %%
