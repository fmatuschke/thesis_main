#%%
import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
%matplotlib inline

import fastpli.tools

#%%
sim_path = "/data/PLI-Group/felix/data/thesis/2_simulation/1_cubes/output/cube_2pop_135_rc1_r_0.5"
df_acc = pd.read_pickle(
    os.path.join(sim_path, "analysis", f"cube_2pop_simulation_schilling.pkl"))
df_sim = pd.read_pickle(
    os.path.join(sim_path, "analysis", f"cube_2pop_simulation.pkl"))
df_sim["trel_mean"] = df_sim["rofl_trel"].apply(lambda x: np.mean(x))
df_sim["ret_mean"] = df_sim["epa_ret"].apply(lambda x: np.mean(x))
df_sim["trans_mean"] = df_sim["epa_trans"].apply(lambda x: np.mean(x))

# %%
df = df_sim[df_sim.psi == 0.1]
df = df[df.f0_inc == 0]
df = df[df.f1_rot == 0]


df['rofl_dir'] = df['rofl_dir'].apply(lambda x: np.rad2deg(x))
df['rofl_inc'] = df['rofl_inc'].apply(lambda x: np.rad2deg(x))
df['epa_dir'] = df['epa_dir'].apply(lambda x: np.rad2deg(x))
df = df.copy()


# %%
def to_spherical(om,f0,f1):    
    v = np.array([np.cos(np.deg2rad(om)), np.sin(np.deg2rad(om)), 0])
    rot_inc = fastpli.tools.rotation.y(-np.deg2rad(f0))
    rot_phi = fastpli.tools.rotation.x(np.deg2rad(f1))
    rot = np.dot(rot_inc, rot_phi)
    v = np.dot(rot, v)
    return np.arctan2(v[1], v[0]), np.arcsin(v[2])

# %%

phi = np.empty_like(df.omega)
incl = np.empty_like(df.omega)
for i, (o, f0, f1) in enumerate(zip(df.omega, df.f0_inc, df.f1_rot)):
    phi[i], incl[i] = to_spherical(o, f0, f1)
    # print(o,f0,f1, np.rad2deg(phi[i]), np.rad2deg(theta[i]))
df["phi"] = np.rad2deg(phi)
df["theta"] = np.rad2deg(incl)

# %%
