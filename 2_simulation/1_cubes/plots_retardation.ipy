#%%
from IPython import get_ipython
get_ipython().run_line_magic('matplotlib', 'inline')
from jupyterthemes import jtplot
jtplot.style(theme="onedork", context="notebook", ticks=True, grid=True)
#%%
import h5py
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import os
import seaborn as sns

import fibers
import fastpli.tools

#%%

sim_path = "2_simulation/1_cubes/output/sim_120_ime_/"

# df_model = pd.read_pickle(
#     os.path.join(os.getcwd(), "../..",
#                  "1_model/1_cubes/output/cube_2pop_120/cube_2pop.pkl"))
# print("df_model:", df_model.columns)

# df_model_hist = pd.read_pickle(
#     os.path.join(os.getcwd(), "../..",
#                  "1_model/1_cubes/output/cube_2pop_120/hist/cube_2pop.pkl"))
# print("df_model_hist:", df_model_hist.columns)

df_sim = pd.read_pickle(
    os.path.join(os.getcwd(), "../..", sim_path,
                 "analysis/cube_2pop_simulation.pkl"))
print("df_sim:", df_sim.columns)

# df_sim_sch = pd.read_pickle(
#     os.path.join(os.getcwd(), "../..",
#                  sim_path,
#                  "analysis/cube_2pop_simulation_schilling.pkl"))
# print("df_sim_sch:", df_sim_sch.columns)

# df_acc = pd.read_pickle(
#     os.path.join(os.getcwd(), "../..",
#                  sim_pathh,
#                  "analysis/cube_2pop_simulation_accs.pkl"))
# print("df_acc:", df_acc.columns)

#%%


def get_file_from_parameter(psi="0.30",
                            omega="30.00",
                            r="0.50",
                            incl="30.00",
                            rot="0.00"):

    model_str = os.path.join(
        os.getcwd(), "../..", "1_model/1_cubes/output/cube_2pop_120",
        f"cube_2pop_psi_{psi}_omega_{omega}_r_{r}_v0_120_.solved.h5")

    sim_str = os.path.join(
        os.getcwd(), "../..", "2_simulation/1_cubes/output/sim_120_new/0.125",
        f"cube_2pop_psi_{psi}_omega_{omega}_r_{r}_v0_120_.solved_vs_0.1250_inc_{incl}_rot_{rot}.h5"
    )

    return model_str, sim_str


def get_rotations(omega):
    return fibers.omega_rotations(omega)


def get_sim(microscope="PM",
            species="Vervet",
            model="r",
            psi="0.30",
            omega="30.00",
            r="0.50",
            incl="30.00",
            rot="0.00"):

    _, sim_str = get_file_from_parameter(psi, omega, r, incl, rot)

    return h5py.File(sim_str)[f"{microscope}/{species}/{model}"]


#%%
microscope = "PM"
species = "Vervet"
model = "r"
radius = 0.50
# incl = 0.00
rot = 0.00

#%%
df = df_sim.query('microscope == @microscope & species == @species & ' +
                  'model == @model & radius == @radius')
df = df.apply(pd.Series.explode).reset_index()
for col in df.columns:
    if len(df[col].unique()) == 1:
        df.drop(col, inplace=True, axis=1)
df = df.infer_objects()
gain = 0.1175 if microscope == "PM" else 3
df['noise'] = np.sqrt(df['epa_trans'].to_numpy() / 2 * gain)


#%%
def theta_from_inc_rot(omega, inc, rot):
    v = np.array([np.cos(np.deg2rad(omega)), np.sin(np.deg2rad(omega)), 0])
    rot_inc = fastpli.tools.rotation.y(-np.deg2rad(inc))
    rot_phi = fastpli.tools.rotation.x(np.deg2rad(rot))
    rot = np.dot(rot_inc, rot_phi)
    v = np.dot(rot, v)
    return np.arccos(v[2])


def phi_from_inc_rot(omega, inc, rot):
    v = np.array([np.cos(np.deg2rad(omega)), np.sin(np.deg2rad(omega)), 0])
    rot_inc = fastpli.tools.rotation.y(-np.deg2rad(inc))
    rot_phi = fastpli.tools.rotation.x(np.deg2rad(rot))
    rot = np.dot(rot_inc, rot_phi)
    v = np.dot(rot, v)
    return np.arctan2(v[1], v[0])


def theta_phi_from_inc_rot(omega, inc, rot):
    v = np.array([np.cos(np.deg2rad(omega)), np.sin(np.deg2rad(omega)), 0])
    rot_inc = fastpli.tools.rotation.y(-np.deg2rad(inc))
    rot_phi = fastpli.tools.rotation.x(np.deg2rad(rot))
    rot = np.dot(rot_inc, rot_phi)
    v = np.dot(rot, v)
    return np.arccos(v[2]), np.arctan2(v[1], v[0])


df_mean = []
for psi in sorted(df.psi.unique()):
    for f0_inc in sorted(df[(df.psi == psi)].f0_inc.unique()):
        for omega in sorted(df[(df.psi == psi) &
                               (df.f0_inc == f0_inc)].omega.unique()):
            for f1_rot in sorted(df[(df.psi == psi) & (df.f0_inc == f0_inc) &
                                    (df.omega == omega)].f1_rot.unique()):
                df_ = df_sim.query(
                    'microscope == @microscope & species == @species & ' +
                    'model == @model & radius == @radius & ' +
                    'psi == @psi & f0_inc == @f0_inc & ' +
                    'omega == @omega & f1_rot == @f1_rot')

                if len(df_) != 1:
                    print("FOOOOO")
                    exit(1)

                theta, phi = theta_phi_from_inc_rot(omega, f0_inc, f1_rot)
                df_mean.append(
                    pd.DataFrame(
                        {
                            'psi': psi,
                            'f0_inc': f0_inc,
                            'omega': omega,
                            'f1_rot': f1_rot,
                            'epa_trans': np.mean(df_.epa_trans.iloc[0]),
                            'epa_trans_std': np.std(df_.epa_trans.iloc[0]),
                            'epa_ret': np.mean(df_.epa_ret.iloc[0]),
                            'epa_ret_std': np.std(df_.epa_ret.iloc[0]),
                            'plot_theta': theta,
                            'plot_phi': phi
                        },
                        index=[0]))

df_mean = pd.concat(df_mean, ignore_index=True)

# %%
import matplotlib
fig, axs = plt.subplots(nrows=len(df_mean.f0_inc.unique()),
                        ncols=len(df_mean.psi.unique()),
                        subplot_kw={'projection': 'polar'},
                        figsize=(20, 20))
for j, psi in enumerate(sorted(df_mean.psi.unique())):
    for i, inc in enumerate(sorted(df_mean.f0_inc.unique())):
        df_ = df_mean[(df_mean.psi == psi) & (df_mean.f0_inc == inc)]
        cmap = matplotlib.colors.Normalize(vmin=0, vmax=1)
        axs[i, j].scatter(df_["plot_phi"].to_numpy(),
                          np.rad2deg(df_["plot_theta"].to_numpy()),
                          c=cmap(df_["epa_ret"].to_numpy()))
        axs[i, j].set_rmax(90)
        axs[i, j].set_rticks([0, 30, 60, 90])
        axs[i, j].set_rlabel_position(0)

# %%
from importlib import reload
import polar_hist_to_tikz
hist_to_tikz = reload(polar_hist_to_tikz)

polar_hist_to_tikz.generate(df_mean, "epa_ret",
                            "simulation_retardation_PM_Vervet_r")

# %%
