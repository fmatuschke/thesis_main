#%%
from IPython import get_ipython
get_ipython().run_line_magic('matplotlib', 'inline')
from jupyterthemes import jtplot
jtplot.style(theme="onedork", context="notebook", ticks=True, grid=True)
#%%
import h5py
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import os
import seaborn as sns

import fibers
import fastpli.tools

#%%
# df_model = pd.read_pickle(
#     os.path.join(os.getcwd(), "../..",
#                  "1_model/1_cubes/output/cube_2pop_120/cube_2pop.pkl"))
# print("df_model:", df_model.columns)

# df_model_hist = pd.read_pickle(
#     os.path.join(os.getcwd(), "../..",
#                  "1_model/1_cubes/output/cube_2pop_120/hist/cube_2pop.pkl"))
# print("df_model_hist:", df_model_hist.columns)

# df_sim = pd.read_pickle(
#     os.path.join(os.getcwd(), "../..",
#                  "2_simulation/1_cubes/output/sim_120_new/0.125/",
#                  "analysis/cube_2pop_simulation.pkl"))
# print("df_sim:", df_sim.columns)

# df_sim_sch = pd.read_pickle(
#     os.path.join(os.getcwd(), "../..",
#                  "2_simulation/1_cubes/output/sim_120_new/0.125/",
#                  "analysis/cube_2pop_simulation_schilling.pkl"))
# print("df_sim_sch:", df_sim_sch.columns)

df_acc = pd.read_pickle(
    os.path.join(os.getcwd(), "../..",
                 "2_simulation/1_cubes/output/sim_120_ime_/",
                 "analysis/cube_2pop_simulation_accs.pkl"))
print("df_acc:", df_acc.columns)

#%%


def get_file_from_parameter(psi="0.30",
                            omega="30.00",
                            r="0.50",
                            incl="30.00",
                            rot="0.00"):

    model_str = os.path.join(
        os.getcwd(), "../..", "1_model/1_cubes/output/cube_2pop_120",
        f"cube_2pop_psi_{psi}_omega_{omega}_r_{r}_v0_120_.solved.h5")

    sim_str = os.path.join(
        os.getcwd(), "../..", "2_simulation/1_cubes/output/sim_120_new/0.125",
        f"cube_2pop_psi_{psi}_omega_{omega}_r_{r}_v0_120_.solved_vs_0.1250_inc_{incl}_rot_{rot}.h5"
    )

    return model_str, sim_str


def get_rotations(omega):
    return fibers.omega_rotations(omega)


def get_sim(microscope="PM",
            species="Vervet",
            model="r",
            psi="0.30",
            omega="30.00",
            r="0.50",
            incl="30.00",
            rot="0.00"):

    _, sim_str = get_file_from_parameter(psi, omega, r, incl, rot)

    return h5py.File(sim_str)[f"{microscope}/{species}/{model}"]


#%%
microscope = "PM"
species = "Vervet"
model = "r"
# r = 0.50
incl = 0.00
rot = 0.00

#%%
df_res = []

for r in sorted(df_sim['radius'].unique()):
    for psi in sorted(df_sim['psi'].unique()):
        for omega in sorted(df_sim[df_sim['psi'] == psi]['omega'].unique()):
            df_ = df_sim.query(
                'microscope == @microscope & species == @species & ' +
                'model == @model & radius == @r & omega == @omega & ' +
                'psi == @psi & f0_inc == @incl & f1_rot == @rot')

            df = pd.DataFrame({
                'microscope': microscope,
                'species': species,
                'model': model,
                'radius': r,
                'f0_inc': incl,
                'f1_rot': rot,
                'omega': omega,
                'psi': psi,
                'trans': df_.epa_trans.to_numpy()[0],
                'dir': np.rad2deg(df_.epa_dir.to_numpy()[0]),
                'ret': df_.epa_ret.to_numpy()[0],
            })
            df = df.apply(pd.Series.explode).reset_index()
            df_res.append(df)

df_res = pd.concat(df_res)
df_res = df_res.apply(pd.Series.explode).reset_index()

#%%

sns.pointplot(x="omega", y="trans", hue="psi", data=df_res, ci=68)
# sns.pointplot(
#     x="trans",
#     hue="trans",
#     data=df_res[df_res.psi == 0.3],
# )

#     line = plt.errorbar(omegas, signal, std)
#     line.set_label(f'psi:{psi}')
# plt.legend()

# %%
for r in sorted(df_sim_sch['radius'].unique()):
    for psi in sorted(df_sim_sch['psi'].unique()):
        for omega in sorted(
                df_sim_sch[df_sim_sch['psi'] == psi]['omega'].unique()):
            pass

# %%
microscope = "PM"
species = "Vervet"
model = "r"
incl = 0.00
rot = 0.00

df_ = df_sim_sch.query('microscope == @microscope & species == @species & ' +
                       'model == @model & radius == @r &' +
                       'f0_inc == @incl & f1_rot == @rot')

# %%

#%%

for model in ["p", "r"]:
    fig, axs = plt.subplots(3, figsize=(15, 15))
    microscope = "PM"
    species = "Vervet"
    # model = "r"
    # f0_inc = 0.00
    # f1_rot = 0.00

    # omega = 30

    df_ = df_acc.query('microscope == @microscope & species == @species & ' +
                       'model == @model & radius0 == 0.5')

    # df_ = df_acc.query('microscope == @microscope & species == @species & ' +
    #                    'model == @model & omega == @omega & ' +
    #                    'f0_inc == @f0_inc & f1_rot == @f1_rot')

    # for col in df_.columns:
    #     if len(df_[col].unique()) == 1:
    #         df_.drop(col, inplace=True, axis=1)

    # print(df_)

    sns.lineplot(data=df_,
                 x="radius1",
                 y="accGtGt",
                 hue="psi",
                 style="omega",
                 palette="mako_r",
                 markers=True,
                 ax=axs[0])
    sns.lineplot(data=df_,
                 x="radius1",
                 y="accGtSim",
                 hue="psi",
                 style="omega",
                 palette="mako_r",
                 markers=True,
                 ax=axs[1],
                 legend=False)
    sns.lineplot(data=df_,
                 x="radius1",
                 y="accSimSim",
                 hue="psi",
                 style="omega",
                 palette="mako_r",
                 markers=True,
                 ax=axs[2],
                 legend=False)
# %%
